module.exports = {
  root: true,
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    '@vue/typescript/recommended',
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:css/recommended',
    'plugin:prettier/recommended',
    'plugin:promise/recommended',
    'plugin:vue/vue3-essential',
    'plugin:vue/vue3-recommended',
    'plugin:vue/vue3-strongly-recommended',
  ],
  parser: 'vue-eslint-parser',
  parserOptions: {
    parser: '@typescript-eslint/parser',
    ecmaVersion: 'latest',
  },
  plugins: ['vue', '@typescript-eslint'],
  rules: {
    '@typescript-eslint/explicit-function-return-type': 'error',
    '@typescript-eslint/explicit-module-boundary-types': 'error',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'interface',
        format: ['PascalCase'],
      },
      {
        selector: 'typeAlias',
        format: ['PascalCase'],
      },
      {
        selector: 'variable',
        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
      },
      {
        selector: 'typeLike',
        format: ['PascalCase'],
      },
      {
        selector: 'function',
        format: ['camelCase'],
      },
    ],
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/no-non-null-assertion': 'error',
    '@typescript-eslint/no-shadow': 'error',
    'camelcase': 'error',
    'capitalized-comments': 'error',
    'complexity': 'error',
    'default-param-last': 'error',
    'eqeqeq': 'error',
    'func-style': 'error',
    'multiline-comment-style': 'error',
    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'warn',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'warn',
    'no-duplicate-imports': 'error',
    'no-else-return': 'error',
    'no-empty-function': 'error',
    'no-nested-ternary': 'error',
    'no-shadow': 'error',
    'no-unneeded-ternary': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'operator-assignment': 'error',
    'prefer-const': 'error',
    'prefer-destructuring': [
      'error',
      { array: false, object: true },
      { enforceForRenamedProperties: false },
    ],
    'prettier/prettier': [
      'error',
      {
        endOfLine: 'auto',
      },
    ],
    'promise/prefer-await-to-then': 'error',
    'promise/prefer-await-to-callbacks': 'error',
    'quotes': ['error', 'single', { avoidEscape: true }],
    'vue/attributes-order': [
      'error',
      {
        order: [
          ['GLOBAL', 'UNIQUE', 'SLOT'],
          'DEFINITION',
          'CONDITIONALS',
          'LIST_RENDERING',
          'RENDER_MODIFIERS',
          'CONTENT',
          'TWO_WAY_BINDING',
          'OTHER_DIRECTIVES',
          'ATTR_DYNAMIC',
          'EVENTS',
          ['ATTR_SHORTHAND_BOOL', 'ATTR_STATIC'],
        ],
        alphabetical: true,
      },
    ],
    'vue/block-lang': ['error', { script: { lang: 'ts' } }],
    'vue/component-api-style': ['error', ['script-setup', 'composition']],
    'vue/component-name-in-template-casing': ['error', 'PascalCase'],
    'vue/component-tags-order': [
      'error',
      {
        order: ['script[setup]', 'script', 'template', 'style'],
      },
    ],
    'vue/custom-event-name-casing': 'error',
    'vue/define-props-declaration': ['error', 'type-based'],
    'vue/html-self-closing': [
      'error',
      {
        html: {
          void: 'always',
          normal: 'always',
          component: 'always',
        },
        svg: 'always',
        math: 'always',
      },
    ],
    'vue/max-attributes-per-line': 'off',
    'vue/multi-word-component-names': 'error',
    'vue/no-dupe-keys': 'error',
    'vue/no-lone-template': 'error',
    'vue/no-reserved-component-names': 'error',
    'vue/no-spaces-around-equal-signs-in-attribute': ['error'],
    'vue/no-static-inline-styles': ['error', { allowBinding: false }],
    'vue/no-unused-emit-declarations': 'error',
    'vue/no-useless-v-bind': [
      'error',
      { ignoreIncludesComment: false, ignoreStringEscape: false },
    ],
    'vue/prop-name-casing': ['error', 'camelCase'],
    'vue/require-explicit-emits': [
      'error',
      {
        allowProps: false,
      },
    ],
    'vue/script-setup-uses-vars': 'error',
    'vue/singleline-html-element-content-newline': 'off',
    'vue/v-on-event-hyphenation': [
      'error',
      'always',
      {
        autofix: true,
      },
    ],
  },
  ignorePatterns: ['dist'],
  globals: {
    defineProps: 'readonly',
    defineEmits: 'readonly',
    defineExpose: 'readonly',
    withDefaults: 'readonly',
  },
};
